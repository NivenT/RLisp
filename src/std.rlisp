(defun caar [lst] (car (car lst)))
(defun cadr [lst] (car (cdr lst)))
(defun cdar [lst] (cdr (car lst)))
(defun cddr [lst] (cdr (cdr lst)))
(defun caaar [lst] (car (car (car lst))))
(defun caadr [lst] (car (car (cdr lst))))
(defun cadar [lst] (car (cdr (car lst))))
(defun caddr [lst] (car (cdr (cdr lst))))
(defun cdaar [lst] (cdr (car (car lst))))
(defun cdadr [lst] (cdr (car (cdr lst))))
(defun cddar [lst] (cdr (cdr (car lst))))
(defun cdddr [lst] (cdr (cdr (cdr lst))))
(defun caaaar [lst] (car (car (car (car lst)))))
(defun caaadr [lst] (car (car (car (cdr lst)))))
(defun caadar [lst] (car (car (cdr (car lst)))))
(defun caaddr [lst] (car (car (cdr (cdr lst)))))
(defun cadaar [lst] (car (cdr (car (car lst)))))
(defun cadadr [lst] (car (cdr (car (cdr lst)))))
(defun caddar [lst] (car (cdr (cdr (car lst)))))
(defun cadddr [lst] (car (cdr (cdr (cdr lst)))))
(defun cdaaar [lst] (cdr (car (car (car lst)))))
(defun cdaadr [lst] (cdr (car (car (cdr lst)))))
(defun cdadar [lst] (cdr (car (cdr (car lst)))))
(defun cdaddr [lst] (cdr (car (cdr (cdr lst)))))
(defun cddaar [lst] (cdr (cdr (car (car lst)))))
(defun cddadr [lst] (cdr (cdr (car (cdr lst)))))
(defun cdddar [lst] (cdr (cdr (cdr (car lst)))))
(defun cddddr [lst] (cdr (cdr (cdr (cdr lst)))))
(defun caaaaar [lst] (car (car (car (car (car lst))))))
(defun caaaadr [lst] (car (car (car (car (cdr lst))))))
(defun caaadar [lst] (car (car (car (cdr (car lst))))))
(defun caaaddr [lst] (car (car (car (cdr (cdr lst))))))
(defun caadaar [lst] (car (car (cdr (car (car lst))))))
(defun caadadr [lst] (car (car (cdr (car (cdr lst))))))
(defun caaddar [lst] (car (car (cdr (cdr (car lst))))))
(defun caadddr [lst] (car (car (cdr (cdr (cdr lst))))))
(defun cadaaar [lst] (car (cdr (car (car (car lst))))))
(defun cadaadr [lst] (car (cdr (car (car (cdr lst))))))
(defun cadadar [lst] (car (cdr (car (cdr (car lst))))))
(defun cadaddr [lst] (car (cdr (car (cdr (cdr lst))))))
(defun caddaar [lst] (car (cdr (cdr (car (car lst))))))
(defun caddadr [lst] (car (cdr (cdr (car (cdr lst))))))
(defun cadddar [lst] (car (cdr (cdr (cdr (car lst))))))
(defun caddddr [lst] (car (cdr (cdr (cdr (cdr lst))))))
(defun cdaaaar [lst] (cdr (car (car (car (car lst))))))
(defun cdaaadr [lst] (cdr (car (car (car (cdr lst))))))
(defun cdaadar [lst] (cdr (car (car (cdr (car lst))))))
(defun cdaaddr [lst] (cdr (car (car (cdr (cdr lst))))))
(defun cdadaar [lst] (cdr (car (cdr (car (car lst))))))
(defun cdadadr [lst] (cdr (car (cdr (car (cdr lst))))))
(defun cdaddar [lst] (cdr (car (cdr (cdr (car lst))))))
(defun cdadddr [lst] (cdr (car (cdr (cdr (cdr lst))))))
(defun cddaaar [lst] (cdr (cdr (car (car (car lst))))))
(defun cddaadr [lst] (cdr (cdr (car (car (cdr lst))))))
(defun cddadar [lst] (cdr (cdr (car (cdr (car lst))))))
(defun cddaddr [lst] (cdr (cdr (car (cdr (cdr lst))))))
(defun cdddaar [lst] (cdr (cdr (cdr (car (car lst))))))
(defun cdddadr [lst] (cdr (cdr (cdr (car (cdr lst))))))
(defun cddddar [lst] (cdr (cdr (cdr (cdr (car lst))))))
(defun cdddddr [lst] (cdr (cdr (cdr (cdr (cdr lst))))))
(defun abs [n] ((if (> n 0) + -) n))
(defun fact [n] (if (<= n 1) 1 (* n (fact (- n 1)))))
(defun round [n] (if (>= (- n (floor n)) .5) (ceil n) (floor n)))
(defun null? [lst] (equal? lst nil))
(defun 1+ [n] (+ n 1))
(defun 1- [n] (- n 1))
(defun length [lst] (if (null? lst) 0 (1+ (length (cdr lst)))))
(defun join [lst1 lst2] 
	(if (null? lst1) 
		lst2 
		(cons (car lst1) (join (cdr lst1) lst2))))
(defun append [lst1 item] (join lst1 (list item)))
(defun list* [&rest lists]
	(join (most lists) (last lists)))
(defun member [elem lst]
	(unless (null? lst)
		(if (equal? (car lst) elem)
			elem
			(member elem (cdr lst)))))
(defun assoc [elem lst]
	(unless (null? lst)
		(if (equal? (caar lst) elem)
			(cdar lst)
			(assoc elem (cdr lst)))))
(defun any? [func lst]
	(unless (null? lst)
		(if (func (car lst))
			(car lst)
			(any? func (cdr lst)))))
(defun all? [func lst]
	(if (null? lst)
		t
		(unless (not (func (car lst)))
			(all? func (cdr lst)))))
(defun map [func lst]
	(unless (null? lst)
		(cons (func (car lst)) (map func (cdr lst)))))
(defun filter [pred lst]
	(unless (null? lst)
		(if (pred (car lst))
			(cons (car lst) (filter pred (cdr lst)))
			(filter pred (cdr lst)))))
(defun foldl [func init lst]
	(if (null? lst)
		init
		(foldl func (func init (car lst)) (cdr lst))))
(defun foldr [func init lst]
	(if (null? lst)
		init
		(foldr func (func (last lst) init) (most lst))))
(defun range [max &key (step 1) (min 0)]
	(unless (>= min max)
		(cons min (range max :step step :min (+ min step)))))
(defun make-list [elem size]
	(unless (<= size 0)
		(cons elem (make-list elem (1- size)))))
(defun last [lst]
	(if (null? (cdr lst))
		(car lst)
		(last (cdr lst))))
(defun complement [pred]
	(lambda [x] (not (pred x))))
(defun reverse [lst]
	(if (null? lst)
		nil
		(append (reverse (cdr lst)) (car lst))))
(defun flatten (lst)
	(cond 	((null? lst) nil)
			((list? lst) (join (flatten (car lst)) (flatten (cdr lst))))
			(t (list lst))))
(defun nthmost [n lst]
	(if (= 0 n)
		lst
		(most (nthmost (1- n) lst))))
(defun partition [lst size &optional (step size) (runninglist nil)]
	(if (< (length lst) size)
		runninglist
		(partition (nthcdr step lst) size step (append runninglist 
			(nthmost (- (length lst) size) lst)))))
(defun sublis [tree old new]
	(cond	((equal? tree old) new)
			((cons? tree) (cons (sublis (car tree) old new) (sublis (cdr tree) old new)))
			(t tree)))
(defun unique [lst]
	(unless (null? lst)
		(if (member (car lst) (cdr lst))
			(unique (cdr lst))
			(cons (car lst) (unique (cdr lst))))))
(defun union [lst1 lst2]
	(unique (join lst1 lst2)))
(defun intersect [lst1 lst2]
	(unless (null? lst1)
		(if (member (car lst1) lst2)
			(cons (car lst1) (intersect (cdr lst1) lst2))
			(intersect (cdr lst1) lst2))))
(defun set-difference [lst1 lst2]
	(unless (null? lst1)
		(if (member (car lst1) lst2)
			(set-difference (cdr lst1) lst2)
			(cons (car lst1) (set-difference (cdr lst1) lst2)))))
(defun set-sym-difference [lst1 lst2]
	(union (set-difference lst1 lst2) (set-difference lst2 lst1)))
(defun gcd [a b]
	(cond 	((> b a) (gcd b a))
			((= b 0) a)
			(t (gcd b (mod a b)))))
(defun slice (lst start end)
	(cond	((null lst) lst)
			((= end 0) nil)
			((< end 0) (slice lst start (+ end (length lst))))
			((< start 0) (slice lst (+ start (length lst)) end))
			((< end start) nil)
			((= start 0) (cons (car lst) (slice (cdr lst) 0 (1- end))))
			(t (slice (cdr lst) (1- start) (1- end)))))
		
(defmacro when [pred body]
	`(if ,pred ,body nil))
(defmacro unless [pred body]
	`(if ,pred nil ,body))
(defmacro and [&rest preds]
	`(if (null? (quote ,preds))
		t
		(if (car (quote ,preds))
			(apply and (cdr (quote ,preds))))))
(defmacro or [&rest preds]
	`(unless (null? (quote ,preds))
		(if (car (quote ,preds))
			(car (quote ,preds))
			(apply or (cdr (quote ,preds))))))
(defmacro cond [&rest conditions]
	`(unless (null? (quote ,conditions))
		(if (eval (caar (quote ,conditions)))
			(eval (cadar (quote ,conditions)))
			(apply cond (cdr (quote ,conditions))))))
(defmacro dolist [var lst &rest body]
	`(unless (null? ,lst)
		(progn (let ((,var (car ,lst)))
			(apply progn (quote ,body)))
			(apply dolist (list* (quote ,var) (quote (quote ,(cdadr lst))) (quote 
				,body))))))
(defmacro dotimes [var start stop inc &rest body]
	`(apply dolist (list* (quote ,var) (quote ,(range stop :min start :step inc)) (quote ,body))))